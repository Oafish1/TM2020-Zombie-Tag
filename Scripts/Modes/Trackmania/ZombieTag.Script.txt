/**
 *	Zombie tag gamemode
 */

#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextBase.Script.txt"

#Const CompatibleMapTypes "TrackMania\\TM_Race"
#Const Version "2023-07-05"
#Const ScriptName "Modes/TrackMania/ZombieTag.Script.txt"
#Const C_ModeName "Zombie Tag"
#Const Description "A singular tagger is chosen from the present players, if tagged, a player joins the tagging team."

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

#Include "TextLib" as TL
#Include "MathLib" as ML

#Include "Libs/Oafish/ModeLibs/Common/Hitbox.Script.txt" as Hitbox


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Settings
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Collision Settings
#Setting S_TrustClientSimu False
#Setting S_UseCrudeExtrapolation False

// Gamemode Settings
#Setting S_TaggerAssignDelay 10000
#Setting S_TaggedSpawnDelay 3000
#Setting S_RoundEndTime 10000
#Setting S_TaggerAssign True
#Setting S_Collision True
#Setting S_RespawnSpeedLimitKmh 0


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Backend
#Const C_TaggerClan 2
#Const C_HiderClan 1
#Const C_Layer_PlayerMarkers "Layer-Player-Marker"
#Const C_Prefix_PlayerMarkers "Player-Marker-"


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Extends
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Structs
#Struct ClanCount {
	Integer NumTaggers;
	Integer NumHiders;
}
#Struct K_TaggerAssignTimer {
	Boolean Assigned;
	Integer SpawnTime;
}


// Global Variables
declare K_TaggerAssignTimer G_TaggerAssignTimer;
declare CMapSpawn G_Spawn;
declare Ident[] G_PlayerMarkerIds;


***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
***


***Match_Rules***
***
ModeInfo::SetName(C_ModeName);
ModeInfo::SetRules(Description);
ModeInfo::SetStatusMessage(Description);	
***


***Match_StartServer***
***
// Turn collisions on
UsePvPCollisions = S_Collision;
UsePvECollisions = True;

// Use teams
UseMultiClans = True;
UseForcedClans = True;
UseClans = True;

// Respawn behavior
SpawnInvulnerabilityDuration = 0;
UnspawnAnimDuration = 0;
SpawnDelayDuration = 0;
RespawnBehaviour = CSmMode::ERespawnBehaviour::DoNothing;
GiveUpBehaviour = CSmMode::EGiveUpBehaviour::DoNothing;
CheckpointBehaviour = CSmMode::ECheckpointBehaviour::Custom;

// UI
UIManager.UIAll.TeamLabelsShowNames = CUIConfig::EVisibility::ForcedVisible;
UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::WhenInFrustum;
UIManager.UIAll.OpposingTeamLabelsShowNames = CUIConfig::EVisibility::ForcedVisible;
UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::WhenVisible;
UIManager.UIAll.LabelsVisibility = CUIConfig::EHudVisibility::Everything;
***


***Match_StartRound***
***
// UI
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.HoldLoadingScreen = False;

// Find first spawn
foreach (Landmark in MapLandmarks) {
	if (Landmark.PlayerSpawn != Null) {
  	G_Spawn = Landmark.PlayerSpawn;
		continue;
	}
}

// Initialize players
foreach (Player in Players) {
	InitializePlayer(Player, C_HiderClan);
}

// Start Tagger Assignment Timer
G_TaggerAssignTimer.Assigned = False;
G_TaggerAssignTimer.SpawnTime = Now + S_TaggerAssignDelay + 3000;

// Begin Message
declare Text NotificationText;
NotificationText = TL::Compose("Round starting! $<%1$> seconds to run.", TL::ToText((S_TaggerAssignDelay) / 1000));
SendGlobalMessage(3000, NotificationText);
***


***Match_PlayLoop***
***
// Assign Tagger
if (!G_TaggerAssignTimer.Assigned && (G_TaggerAssignTimer.SpawnTime < Now)) {
	declare Integer RandomPlayer = ML::Rand(0, Players.count-1);
	declare CSmPlayer SelectedPlayer = Players[RandomPlayer];
	if (S_TaggerAssign) TagPlayer(SelectedPlayer);
	G_TaggerAssignTimer.Assigned = True;
}

// Handle events
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CSmModeEvent::EType::OnPlayerRequestRespawn: OnPlayerRequestRespawn(Event.Player);
		case CSmModeEvent::EType::OnPlayerAdded: OnPlayerAdded(Event.Player);  // TODO: Test this
	}
}

// Handle deaths
foreach (Player in Players) {
	if (!PlayerIsDead(Player)) continue;
	OnPlayerDeath(Player);
}

// Handle delayed spawns
// Supposedly this works
foreach (Player in Players) {
	if (!PlayerIsSpawnable(Player)) continue;
	RespawnPlayer(Player);
}

// Detect collisions
foreach (Player in Players) {
	// Only for taggers
	if (Player.CurrentClan != C_TaggerClan) continue;
	
	// Get opponent collisions
	declare CSmPlayer CollidingOpponent = GetFirstCollidingPlayerOpponent(Player);
	declare Boolean IsCollidingWithOpponent = CollidingOpponent != Null;
	if (!IsCollidingWithOpponent) continue;
	
	// Tag the colliding player
	TagPlayer(CollidingOpponent, Player);
}

// UI Markers for other players
// Could maybe reduce overhead?
RefreshPlayerMarkers();
Layers::Detach(C_Layer_PlayerMarkers);
Layers::Create(C_Layer_PlayerMarkers, PlayerMarkersXML());
Layers::SetType(C_Layer_PlayerMarkers, CUILayer::EUILayerType::Markers);
Layers::Attach(C_Layer_PlayerMarkers);
Layers::Show(C_Layer_PlayerMarkers);

// Count remaining players and end round
if (CountClans().NumHiders == 0) {
	SendGlobalMessage(3000, "All hiders have been found.");
	MB_Sleep(S_RoundEndTime / 2);
	for (Player in Players) UnspawnPlayer(Player);
	MB_Sleep(S_RoundEndTime / 2);
	MB_StopRound();
}
***


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// TODO
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Try assigning the vec3 to the constent before #including hitbox to overwrite ellipse
// Add time limit
// More enclosed maps that cycle
// Change player team without respawn (could use Player.RequestedClan)
// Add OOB waypoints to maps


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

Text PlayerMarkersXML() {
	// Make frames
	declare Text MarkerFramesXML;
	for (Player in Players) {
		MarkerFramesXML ^= """<frameinstance modelid="icon" id="{{{ C_Prefix_PlayerMarkers ^ Player.User.Login }}}"/>""";
	}
	
	// Full text
	return """
	<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
	<manialink version="3" name="Markers">
		<framemodel id="icon" hidden="1">
			<quad id="arrow" pos="0 1" size="6 6" z-index="2" halign="center" valign="center" style="UICommon64_2" substyle="ArrowDownSlim_light"/>
			<label id="distance" pos="0 -2" z-index="1" size="10 5" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="0.4" textemboss="1"/>
			</framemodel>
		<frame z-index="1">
			{{{ MarkerFramesXML }}}
		</frame>
		
		<script><!--
		
		#Include "MathLib" as ML
		
		for (Player in Players) {
			// Find elements
			declare CMlFrame FrameElement = Page.GetFirstChild("{{{ C_Prefix_PlayerMarkers }}}" ^ Player.User.Login) as CMlFrame;
			declare CMlQuad ArrowElement = FrameElement.GetFirstChild("arrow") as CMlQuad;
			declare CMlLabel DistanceElement = FrameElement.GetFirstChild("distance") as CMlLabel;
			
			// Hide if no GUIPlayer
			if (GUIPlayer == Null) {
				ArrowElement.Opacity = 0.;
				DistanceElement.Opacity = 0.;
				continue;
			}
			
			// Determine coloring
			if (Player.CurrentClan == {{{ C_TaggerClan }}}) {
				ArrowElement.Colorize = <1., 0.6, 0.6>;
				DistanceElement.TextColor = <1., 0.6, 0.6>;
			}
			else {
				ArrowElement.Colorize = <0.6, 0.6, 1.>;
				DistanceElement.TextColor = <0.6, 0.6, 1.>;
			}
			
			// Input distance
			declare Vec3 Distance;
			Distance = Player.Position - GUIPlayer.Position;
			DistanceElement.Value = ML::NearestInteger(ML::Distance(<0., 0., 0.>, Distance)) ^ "m";
			
			// Hide if GUIPlayer
			if (Player == GUIPlayer) {
				ArrowElement.Substyle = "ArrowUpSlim_light";
				ArrowElement.Opacity = 0.75;
				DistanceElement.Opacity = 0.;
			}
		}
		
		--></script>
	</manialink>
	""";
}

Void RefreshPlayerMarkers() {
	// Remove existing markers
	foreach (Id in G_PlayerMarkerIds) {
		declare CUIConfigMarker Marker = UIManager.UIAll.Markers[Id];
		UIManager.UIAll.RemoveMarker(Marker);
	}
	G_PlayerMarkerIds = [];
	// Add new markers
	foreach(Player in Players) {
		declare CUIConfigMarker Marker = UIManager.UIAll.AddMarker(Player);
		Marker.HudVisibility = CUIConfigMarker::EHudVisibility::Always;
		Marker.ManialinkFrameId = C_Prefix_PlayerMarkers ^ Player.User.Login;  // Need to order by login for consistent ordering
		Marker.Box = <0., 0.15, 0.>;
		G_PlayerMarkerIds.add(Marker.Id);
	}
}

Void InitializePlayer(CSmPlayer _Player, Integer ClanNum) {
	declare netwrite Integer Net_SpawnTime for _Player = -1;
	SetPlayerClan(_Player, ClanNum);
}

Void OnPlayerAdded(CSmPlayer _Player) {
	InitializePlayer(_Player, C_TaggerClan);
}

Boolean PlayerIsSpawned(CSmPlayer _Player) {
	return _Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned;
}

Boolean PlayerIsSpawnable(CSmPlayer _Player) {
	declare netwrite Integer Net_SpawnTime for _Player;
	return !PlayerIsSpawned(_Player) && (Now > Net_SpawnTime);
}

Boolean PlayerIsDead(CSmPlayer _Player) {
	return PlayerIsSpawned(_Player) && (_Player.Armor <= 0);
}

ClanCount CountClans() {
	declare Integer NumTaggers = 0;
	declare Integer NumHiders = 0;
	foreach (Player in Players) {
		if (Player.CurrentClan == C_TaggerClan) NumTaggers += 1;
		else if (Player.CurrentClan == C_HiderClan) NumHiders += 1;
	}
	return ClanCount{NumTaggers=NumTaggers, NumHiders=NumHiders};
}

Void SendGlobalMessage(Integer _Duration, Text _Message) {
	// Send a big global notification
	foreach(Player in Players) {
		declare CUIConfig UI = UIManager.GetUI(Player);
		if (UI != Null) {
			UI.QueueMessage(_Duration, 1, CUIConfig::EMessageDisplay::Big, _Message);
		}
	}
}

Void RespawnPlayer(CSmPlayer _Player) {
	if (_Player.SpawnStatus == CSmPlayer::ESpawnStatus::Spawned) UnspawnPlayer(_Player);
	SpawnPlayer(_Player, _Player.CurrentClan, 100, G_Spawn, Now);
}

Void TagPlayer(CSmPlayer _Player, CSmPlayer _TaggerPlayer) {
	// Tag and despawn a player
	UnspawnPlayer(_Player);
	SetPlayerClan(_Player, C_TaggerClan);
	declare netwrite Integer Net_SpawnTime for _Player;
	Net_SpawnTime = Now + S_TaggedSpawnDelay;
	
	// Print Notification
	declare Text NotificationText;
	if (_TaggerPlayer != Null) {
		NotificationText = TL::Compose("$AAF$<%1$>$g has been tagged by $FAA$<%2$>$g! $AAF$<%3$>$g remaining.",
			_Player.User.Name,
			_TaggerPlayer.User.Name,
			TL::ToText(CountClans().NumHiders)
		);
	}
	else {
		NotificationText = TL::Compose("$AAF$<%1$>$g has been tagged! $AAF$<%2$>$g remaining.",
			_Player.User.Name,
			TL::ToText(CountClans().NumHiders)
		);
	}
	SendGlobalMessage(3000, NotificationText);
}

Void TagPlayer(CSmPlayer _Player) { TagPlayer(_Player, Null); }

Void OnPlayerDeath(CSmPlayer _Player) {
	if (_Player.CurrentClan == C_HiderClan && G_TaggerAssignTimer.SpawnTime < Now) TagPlayer(_Player);
	RespawnPlayer(_Player);
}

Void OnPlayerRequestRespawn(CSmPlayer _Player) {
	// Check for validity
	if (_Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) return;
	if (S_RespawnSpeedLimitKmh > 0 && _Player.Speed > S_RespawnSpeedLimitKmh / 3.6) return;
	
	// Respawn behavior
	if (_Player.CurrentClan == C_HiderClan && (G_TaggerAssignTimer.SpawnTime < Now)) TagPlayer(_Player);
	RespawnPlayer(_Player);
}

CSmPlayer GetFirstCollidingPlayerOpponent(CSmPlayer _Player) {
	// Get the first colliding opponent
	if (_Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) return Null;
	foreach (Player in Players) {
		if (Player == _Player) continue;
		if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::Spawned) continue;
		if (!Hitbox::AreColliding(Player, _Player)) continue;
		if (Player.CurrentClan == _Player.CurrentClan) continue;
		return Player;
	}
	return Null;
}
